[project]
name = "unicode-api"
version = "15.0.0"
description = "API that provides access to detailed information for all characters, blocks and planes in the Unicode Standard (Built using FastAPI)."
readme = "README.md"
requires-python = ">=3.10"
license = {file = "LICENSE"}
authors = [
    {name = "Aaron Luna", email = "contact@aaronluna.dev"}
]
keywords = ["unicode", "unicode-api"]

[build-system]
requires = ["setuptools", "setuptools-scm"]
build-backend = "setuptools.build_meta"

[tool.black]
line-length = 120
target-version = ['py310']
include = '\.pyi?$'
exclude =  '''
/(
    \.eggs
    | \.git
    | \.hg
    | \.mypy_cache
    | \.pytest_cache
    | \.tox
    | \.vscode
    | __pycache__
    | _build
    | buck-out
    | build
    | dist
    | venv
)/
'''

[tool.ruff]
line-length = 120
select = ["B", "C4", "C90", "E", "ERA", "F", "FA", "I", "INT", "N", "PERF", "PGH", "PIE", "PLE", "PLW", "PTH", "RUF100", "SIM", "UP", "W", "YTT"]
ignore = ["B019", "B905"]
fixable = ["I"]
unfixable = ["B", "C90", "PIE", "SIM"]

[tool.ruff.per-file-ignores]
"app/api/api_v1/dependencies.py" = ["E501"]
"app/docs/dependencies/custom_parameters.py" = ["E501"]
"app/docs/dependencies/filter_tables.py" = ["E501"]
"app/docs/api_docs/readme.py" = ["E501"]
"app/docs/api_docs/swagger_ui.py" = ["E501"]
"app/data/scripts/update_test_data/update_test_list_all_unicode_blocks.py" = ["E501"]
"app/tests/test_block_endpoints/test_get_unicode_block_details/data.py" = ["E501"]
"app/tests/test_block_endpoints/test_list_all_unicode_blocks/data.py" = ["E501"]
"app/tests/test_character_endpoints/test_filter_unicode_characters/data.py" = ["E501"]
"app/tests/test_character_endpoints/test_list_all_unicode_characters/data.py" = ["E501"]
"app/tests/test_character_endpoints/test_search_unicode_characters_by_name/data.py" = ["E501"]
"app/tests/test_codepoint_endpoints/test_get_unicode_character_at_codepoint/data.py" = ["E501"]
"app/schemas/models/block.py" = ["F821"]
"app/schemas/models/character.py" = ["F821"]
"app/schemas/models/plane.py" = ["F821"]

[tool.isort]
profile = "black"
ensure_newline_before_comments = true
skip_gitignore = true
line_length = 120
multi_line_output = 3
use_parentheses = true
include_trailing_comma = true
force_alphabetical_sort_within_sections = true
color_output = true

[tool.pytest.ini_options]
addopts = "-ra --showlocals --cov=app --cov-report term:skip-covered --cov-branch --cov-report html -vv --cache-clear --random-order-bucket=package"
norecursedirs = [
    ".git",
    ".pytest_cache",
    ".vscode",
]

[tool.coverage.run]
omit = [
    "app/cli.py",
    "app/config/dotenv_file.py",
    "app/core/config/config.py",
    "app/core/logging.py",
    "app/core/redis_client.py",
    "app/core/result.py",
    "app/core/util.py",
    "app/data/scripts/*",
    "app/data/util/*",
    "app/docs/*",
    "app/tests/*",
    "app/main.py",
    "app/tasks.py",
]

[tool.coverage.report]
skip_empty = true
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self\\.debug",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "def init_redis",
    "def init_unicode",
]

[tool.coverage.html]
directory = "coverage_html"